/* tslint:disable */
/* eslint-disable */
/**
 * Xtages Internal API
 * Xtages internal API. Some of these endpoints might be extracted to an external API in the future.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {Configuration} from './configuration';
import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from './common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from './base';

/**
 * Request made to POST /checkout/session
 * @export
 * @interface CreateCheckoutSessionReq
 */
export interface CreateCheckoutSessionReq {
    /**
     *
     * @type {string}
     * @memberof CreateCheckoutSessionReq
     */
    organizationName: string;
    /**
     *
     * @type {Array<string>}
     * @memberof CreateCheckoutSessionReq
     */
    priceIds: Array<string>;
}
/**
 * Request made to POST /organization
 * @export
 * @interface CreateOrgReq
 */
export interface CreateOrgReq {
    /**
     *
     * @type {string}
     * @memberof CreateOrgReq
     */
    organizationName: string;
    /**
     *
     * @type {string}
     * @memberof CreateOrgReq
     */
    ownerCognitoUserId: string;
}
/**
 * General API error
 * @export
 * @interface ErrorDesc
 */
export interface ErrorDesc {
    /**
     *
     * @type {number}
     * @memberof ErrorDesc
     */
    code: number;
    /**
     *
     * @type {string}
     * @memberof ErrorDesc
     */
    message: string;
}
/**
 * An Organization
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     *
     * @type {string}
     * @memberof Organization
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Organization
     */
    subscription_status?: OrganizationSubscriptionStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum OrganizationSubscriptionStatusEnum {
    Unconfirmed = 'UNCONFIRMED',
    Active = 'ACTIVE',
    Suspended = 'SUSPENDED',
    PendingCancellation = 'PENDING_CANCELLATION',
    Cancelled = 'CANCELLED'
}


/**
 * CheckoutApi - axios parameter creator
 * @export
 */
export const CheckoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Prepares a Stripe Checkout session
         * @param {CreateCheckoutSessionReq} createCheckoutSessionReq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckoutSession: async (createCheckoutSessionReq: CreateCheckoutSessionReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCheckoutSessionReq' is not null or undefined
            assertParamExists('createCheckoutSession', 'createCheckoutSessionReq', createCheckoutSessionReq)
            const localVarPath = `/checkout/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCheckoutSessionReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates a Stripe customer portal session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerPortalSession: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/checkout/portal/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckoutApi - functional programming interface
 * @export
 */
export const CheckoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckoutApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Prepares a Stripe Checkout session
         * @param {CreateCheckoutSessionReq} createCheckoutSessionReq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCheckoutSession(createCheckoutSessionReq: CreateCheckoutSessionReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCheckoutSession(createCheckoutSessionReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Creates a Stripe customer portal session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomerPortalSession(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomerPortalSession(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CheckoutApi - factory interface
 * @export
 */
export const CheckoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckoutApiFp(configuration)
    return {
        /**
         *
         * @summary Prepares a Stripe Checkout session
         * @param {CreateCheckoutSessionReq} createCheckoutSessionReq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckoutSession(createCheckoutSessionReq: CreateCheckoutSessionReq, options?: any): AxiosPromise<string> {
            return localVarFp.createCheckoutSession(createCheckoutSessionReq, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a Stripe customer portal session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomerPortalSession(options?: any): AxiosPromise<string> {
            return localVarFp.createCustomerPortalSession(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CheckoutApi - object-oriented interface
 * @export
 * @class CheckoutApi
 * @extends {BaseAPI}
 */
export class CheckoutApi extends BaseAPI {
    /**
     *
     * @summary Prepares a Stripe Checkout session
     * @param {CreateCheckoutSessionReq} createCheckoutSessionReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public createCheckoutSession(createCheckoutSessionReq: CreateCheckoutSessionReq, options?: any) {
        return CheckoutApiFp(this.configuration).createCheckoutSession(createCheckoutSessionReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Creates a Stripe customer portal session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public createCustomerPortalSession(options?: any) {
        return CheckoutApiFp(this.configuration).createCustomerPortalSession(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Creates a new Organization beloging to a user, if the user doesn\'t exist then it\'s created also
         * @param {CreateOrgReq} createOrgReq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: async (createOrgReq: CreateOrgReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrgReq' is not null or undefined
            assertParamExists('createOrganization', 'createOrgReq', createOrgReq)
            const localVarPath = `/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrgReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Creates a new Organization beloging to a user, if the user doesn\'t exist then it\'s created also
         * @param {CreateOrgReq} createOrgReq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(createOrgReq: CreateOrgReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(createOrgReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationApiFp(configuration)
    return {
        /**
         *
         * @summary Creates a new Organization beloging to a user, if the user doesn\'t exist then it\'s created also
         * @param {CreateOrgReq} createOrgReq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization(createOrgReq: CreateOrgReq, options?: any): AxiosPromise<Organization> {
            return localVarFp.createOrganization(createOrgReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export class OrganizationApi extends BaseAPI {
    /**
     *
     * @summary Creates a new Organization beloging to a user, if the user doesn\'t exist then it\'s created also
     * @param {CreateOrgReq} createOrgReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public createOrganization(createOrgReq: CreateOrgReq, options?: any) {
        return OrganizationApiFp(this.configuration).createOrganization(createOrgReq, options).then((request) => request(this.axios, this.basePath));
    }
}


