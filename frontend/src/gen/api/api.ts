/* tslint:disable */
/* eslint-disable */
/**
 * Xtages Internal API
 * Xtages internal API. Some of these endpoints might be extracted to an external API in the future. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * A build (CI or CD) that ocurred
 * @export
 * @interface Build
 */
export interface Build {
    /**
     * This is actually the id of the first build_event for this build.
     * @type {number}
     * @memberof Build
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    type: BuildTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    status: BuildStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    initiatorEmail: string;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    initiatorName: string;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    initiatorAvatarUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    commitHash: string;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    commitUrl: string;
    /**
     * 
     * @type {number}
     * @memberof Build
     */
    startTimestampInMillis: number;
    /**
     * 
     * @type {number}
     * @memberof Build
     */
    endTimestampInMillis?: number;
    /**
     * 
     * @type {Array<BuildPhase>}
     * @memberof Build
     */
    phases: Array<BuildPhase>;
}

/**
    * @export
    * @enum {string}
    */
export enum BuildTypeEnum {
    Ci = 'CI',
    Cd = 'CD'
}
/**
    * @export
    * @enum {string}
    */
export enum BuildStatusEnum {
    NotProvisioned = 'NOT_PROVISIONED',
    Succeeded = 'SUCCEEDED',
    Failed = 'FAILED',
    Running = 'RUNNING',
    Unknown = 'UNKNOWN'
}

/**
 * A phase of a Build
 * @export
 * @interface BuildPhase
 */
export interface BuildPhase {
    /**
     * 
     * @type {number}
     * @memberof BuildPhase
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof BuildPhase
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof BuildPhase
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof BuildPhase
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof BuildPhase
     */
    startTimestampInMillis: number;
    /**
     * 
     * @type {number}
     * @memberof BuildPhase
     */
    endTimestampInMillis?: number;
}
/**
 * A reference to the run CD
 * @export
 * @interface CD
 */
export interface CD {
    /**
     * 
     * @type {number}
     * @memberof CD
     */
    id?: number;
}
/**
 * Request made to POST /cd
 * @export
 * @interface CDReq
 */
export interface CDReq {
    /**
     * 
     * @type {string}
     * @memberof CDReq
     */
    commitId: string;
    /**
     * 
     * @type {string}
     * @memberof CDReq
     */
    env: string;
}
/**
 * A reference to the run CI
 * @export
 * @interface CI
 */
export interface CI {
    /**
     * 
     * @type {number}
     * @memberof CI
     */
    id?: number;
}
/**
 * CI Logs
 * @export
 * @interface CILogs
 */
export interface CILogs {
    /**
     * 
     * @type {Array<LogEvent>}
     * @memberof CILogs
     */
    events?: Array<LogEvent>;
}
/**
 * Request made to POST /ci
 * @export
 * @interface CIReq
 */
export interface CIReq {
    /**
     * 
     * @type {string}
     * @memberof CIReq
     */
    commitId: string;
}
/**
 * Request made to POST /checkout/session
 * @export
 * @interface CreateCheckoutSessionReq
 */
export interface CreateCheckoutSessionReq {
    /**
     * 
     * @type {string}
     * @memberof CreateCheckoutSessionReq
     */
    organizationName: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateCheckoutSessionReq
     */
    priceIds: Array<string>;
}
/**
 * Request made to POST /organization
 * @export
 * @interface CreateOrgReq
 */
export interface CreateOrgReq {
    /**
     * 
     * @type {string}
     * @memberof CreateOrgReq
     */
    organizationName: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrgReq
     */
    ownerCognitoUserId: string;
}
/**
 * Request made to POST /project
 * @export
 * @interface CreateProjectReq
 */
export interface CreateProjectReq {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectReq
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectReq
     */
    type: CreateProjectReqTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectReq
     */
    version: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProjectReq
     */
    passCheckRuleEnabled?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateProjectReqTypeEnum {
    Node = 'NODE'
}

/**
 * General API error
 * @export
 * @interface ErrorDesc
 */
export interface ErrorDesc {
    /**
     * 
     * @type {number}
     * @memberof ErrorDesc
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorDesc
     */
    message: string;
}
/**
 * Log event
 * @export
 * @interface LogEvent
 */
export interface LogEvent {
    /**
     * 
     * @type {number}
     * @memberof LogEvent
     */
    timestamp?: number;
    /**
     * 
     * @type {string}
     * @memberof LogEvent
     */
    message?: string;
}
/**
 * Request made to get logs
 * @export
 * @interface LogsReq
 */
export interface LogsReq {
    /**
     * 
     * @type {number}
     * @memberof LogsReq
     */
    buildId: number;
    /**
     * 
     * @type {string}
     * @memberof LogsReq
     */
    buildType: LogsReqBuildTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LogsReqBuildTypeEnum {
    Ci = 'CI',
    Cd = 'CD'
}

/**
 * An Organization
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    subscription_status?: OrganizationSubscriptionStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum OrganizationSubscriptionStatusEnum {
    Unconfirmed = 'UNCONFIRMED',
    Active = 'ACTIVE',
    Suspended = 'SUSPENDED',
    PendingCancellation = 'PENDING_CANCELLATION',
    Cancelled = 'CANCELLED'
}

/**
 * An Xtages project
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    organization: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    ghRepoUrl: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    type: ProjectTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    version: string;
    /**
     * 
     * @type {boolean}
     * @memberof Project
     */
    passCheckRuleEnabled: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum ProjectTypeEnum {
    Node = 'NODE'
}

/**
 * A Project with its last Build data
 * @export
 * @interface ProjectAndLastBuild
 */
export interface ProjectAndLastBuild {
    /**
     * 
     * @type {Project}
     * @memberof ProjectAndLastBuild
     */
    project: Project;
    /**
     * 
     * @type {Build}
     * @memberof ProjectAndLastBuild
     */
    lastBuild?: Build;
}

/**
 * CdApi - axios parameter creator
 * @export
 */
export const CdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Run continuous delivery for the project specified
         * @param {string} projectName Name of the project to run the CD operation
         * @param {CDReq} cDReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cd: async (projectName: string, cDReq: CDReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectName' is not null or undefined
            assertParamExists('cd', 'projectName', projectName)
            // verify required parameter 'cDReq' is not null or undefined
            assertParamExists('cd', 'cDReq', cDReq)
            const localVarPath = `/project/{projectName}/cd`
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cDReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CdApi - functional programming interface
 * @export
 */
export const CdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CdApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Run continuous delivery for the project specified
         * @param {string} projectName Name of the project to run the CD operation
         * @param {CDReq} cDReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cd(projectName: string, cDReq: CDReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CD>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cd(projectName, cDReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CdApi - factory interface
 * @export
 */
export const CdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CdApiFp(configuration)
    return {
        /**
         * 
         * @summary Run continuous delivery for the project specified
         * @param {string} projectName Name of the project to run the CD operation
         * @param {CDReq} cDReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cd(projectName: string, cDReq: CDReq, options?: any): AxiosPromise<CD> {
            return localVarFp.cd(projectName, cDReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CdApi - object-oriented interface
 * @export
 * @class CdApi
 * @extends {BaseAPI}
 */
export class CdApi extends BaseAPI {
    /**
     * 
     * @summary Run continuous delivery for the project specified
     * @param {string} projectName Name of the project to run the CD operation
     * @param {CDReq} cDReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdApi
     */
    public cd(projectName: string, cDReq: CDReq, options?: any) {
        return CdApiFp(this.configuration).cd(projectName, cDReq, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CheckoutApi - axios parameter creator
 * @export
 */
export const CheckoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a Stripe Checkout session
         * @param {CreateCheckoutSessionReq} createCheckoutSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckoutSession: async (createCheckoutSessionReq: CreateCheckoutSessionReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCheckoutSessionReq' is not null or undefined
            assertParamExists('createCheckoutSession', 'createCheckoutSessionReq', createCheckoutSessionReq)
            const localVarPath = `/checkout/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCheckoutSessionReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a Stripe customer portal session URI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerPortalSession: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/checkout/portal/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckoutApi - functional programming interface
 * @export
 */
export const CheckoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckoutApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a Stripe Checkout session
         * @param {CreateCheckoutSessionReq} createCheckoutSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCheckoutSession(createCheckoutSessionReq: CreateCheckoutSessionReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCheckoutSession(createCheckoutSessionReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a Stripe customer portal session URI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerPortalSession(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerPortalSession(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CheckoutApi - factory interface
 * @export
 */
export const CheckoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckoutApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a Stripe Checkout session
         * @param {CreateCheckoutSessionReq} createCheckoutSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckoutSession(createCheckoutSessionReq: CreateCheckoutSessionReq, options?: any): AxiosPromise<string> {
            return localVarFp.createCheckoutSession(createCheckoutSessionReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a Stripe customer portal session URI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerPortalSession(options?: any): AxiosPromise<string> {
            return localVarFp.getCustomerPortalSession(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CheckoutApi - object-oriented interface
 * @export
 * @class CheckoutApi
 * @extends {BaseAPI}
 */
export class CheckoutApi extends BaseAPI {
    /**
     * 
     * @summary Creates a Stripe Checkout session
     * @param {CreateCheckoutSessionReq} createCheckoutSessionReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public createCheckoutSession(createCheckoutSessionReq: CreateCheckoutSessionReq, options?: any) {
        return CheckoutApiFp(this.configuration).createCheckoutSession(createCheckoutSessionReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a Stripe customer portal session URI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public getCustomerPortalSession(options?: any) {
        return CheckoutApiFp(this.configuration).getCustomerPortalSession(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CiApi - axios parameter creator
 * @export
 */
export const CiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Run continuous integration for the project specified
         * @param {string} projectName Name of the project to run the CI operation
         * @param {CIReq} cIReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ci: async (projectName: string, cIReq: CIReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectName' is not null or undefined
            assertParamExists('ci', 'projectName', projectName)
            // verify required parameter 'cIReq' is not null or undefined
            assertParamExists('ci', 'cIReq', cIReq)
            const localVarPath = `/project/{projectName}/ci`
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cIReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CiApi - functional programming interface
 * @export
 */
export const CiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Run continuous integration for the project specified
         * @param {string} projectName Name of the project to run the CI operation
         * @param {CIReq} cIReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ci(projectName: string, cIReq: CIReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CI>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ci(projectName, cIReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CiApi - factory interface
 * @export
 */
export const CiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CiApiFp(configuration)
    return {
        /**
         * 
         * @summary Run continuous integration for the project specified
         * @param {string} projectName Name of the project to run the CI operation
         * @param {CIReq} cIReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ci(projectName: string, cIReq: CIReq, options?: any): AxiosPromise<CI> {
            return localVarFp.ci(projectName, cIReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CiApi - object-oriented interface
 * @export
 * @class CiApi
 * @extends {BaseAPI}
 */
export class CiApi extends BaseAPI {
    /**
     * 
     * @summary Run continuous integration for the project specified
     * @param {string} projectName Name of the project to run the CI operation
     * @param {CIReq} cIReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CiApi
     */
    public ci(projectName: string, cIReq: CIReq, options?: any) {
        return CiApiFp(this.configuration).ci(projectName, cIReq, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LogsApi - axios parameter creator
 * @export
 */
export const LogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve logs for a given CI and certain project
         * @param {string} projectName Name of the project to get the logs from
         * @param {LogsReq} logsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logs: async (projectName: string, logsReq: LogsReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectName' is not null or undefined
            assertParamExists('logs', 'projectName', projectName)
            // verify required parameter 'logsReq' is not null or undefined
            assertParamExists('logs', 'logsReq', logsReq)
            const localVarPath = `/project/{projectName}/logs`
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logsReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogsApi - functional programming interface
 * @export
 */
export const LogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve logs for a given CI and certain project
         * @param {string} projectName Name of the project to get the logs from
         * @param {LogsReq} logsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logs(projectName: string, logsReq: LogsReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CILogs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logs(projectName, logsReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogsApi - factory interface
 * @export
 */
export const LogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve logs for a given CI and certain project
         * @param {string} projectName Name of the project to get the logs from
         * @param {LogsReq} logsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logs(projectName: string, logsReq: LogsReq, options?: any): AxiosPromise<CILogs> {
            return localVarFp.logs(projectName, logsReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogsApi - object-oriented interface
 * @export
 * @class LogsApi
 * @extends {BaseAPI}
 */
export class LogsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve logs for a given CI and certain project
     * @param {string} projectName Name of the project to get the logs from
     * @param {LogsReq} logsReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsApi
     */
    public logs(projectName: string, logsReq: LogsReq, options?: any) {
        return LogsApiFp(this.configuration).logs(projectName, logsReq, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new Organization beloging to a user, if the user doesn\'t exist then it\'s created also
         * @param {CreateOrgReq} createOrgReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: async (createOrgReq: CreateOrgReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrgReq' is not null or undefined
            assertParamExists('createOrganization', 'createOrgReq', createOrgReq)
            const localVarPath = `/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrgReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new Organization beloging to a user, if the user doesn\'t exist then it\'s created also
         * @param {CreateOrgReq} createOrgReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(createOrgReq: CreateOrgReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(createOrgReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new Organization beloging to a user, if the user doesn\'t exist then it\'s created also
         * @param {CreateOrgReq} createOrgReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization(createOrgReq: CreateOrgReq, options?: any): AxiosPromise<Organization> {
            return localVarFp.createOrganization(createOrgReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export class OrganizationApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new Organization beloging to a user, if the user doesn\'t exist then it\'s created also
     * @param {CreateOrgReq} createOrgReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public createOrganization(createOrgReq: CreateOrgReq, options?: any) {
        return OrganizationApiFp(this.configuration).createOrganization(createOrgReq, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new Xtages project
         * @param {CreateProjectReq} createProjectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (createProjectReq: CreateProjectReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectReq' is not null or undefined
            assertParamExists('createProject', 'createProjectReq', createProjectReq)
            const localVarPath = `/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the list of projects for the user\'s organization
         * @param {boolean} [includeLastBuild] Whether to include data about the last Build executed for each Project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects: async (includeLastBuild?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (includeLastBuild !== undefined) {
                localVarQueryParameter['includeLastBuild'] = includeLastBuild;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new Xtages project
         * @param {CreateProjectReq} createProjectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(createProjectReq: CreateProjectReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(createProjectReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the list of projects for the user\'s organization
         * @param {boolean} [includeLastBuild] Whether to include data about the last Build executed for each Project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjects(includeLastBuild?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectAndLastBuild>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjects(includeLastBuild, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new Xtages project
         * @param {CreateProjectReq} createProjectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(createProjectReq: CreateProjectReq, options?: any): AxiosPromise<Project> {
            return localVarFp.createProject(createProjectReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the list of projects for the user\'s organization
         * @param {boolean} [includeLastBuild] Whether to include data about the last Build executed for each Project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(includeLastBuild?: boolean, options?: any): AxiosPromise<Array<ProjectAndLastBuild>> {
            return localVarFp.getProjects(includeLastBuild, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new Xtages project
     * @param {CreateProjectReq} createProjectReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public createProject(createProjectReq: CreateProjectReq, options?: any) {
        return ProjectApiFp(this.configuration).createProject(createProjectReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the list of projects for the user\'s organization
     * @param {boolean} [includeLastBuild] Whether to include data about the last Build executed for each Project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjects(includeLastBuild?: boolean, options?: any) {
        return ProjectApiFp(this.configuration).getProjects(includeLastBuild, options).then((request) => request(this.axios, this.basePath));
    }
}


