/* tslint:disable */
/* eslint-disable */
/**
 * Xtages Internal API
 * Xtages internal API. Some of these endpoints might be extracted to an external API in the future. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * An external domain pointing to a prod deployment of a Project
 * @export
 * @interface AssociatedDomain
 */
export interface AssociatedDomain {
    /**
     * FQDN
     * @type {string}
     * @memberof AssociatedDomain
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AssociatedDomain
     */
    certificateStatus: AssociatedDomainCertificateStatusEnum;
    /**
     * 
     * @type {DomainValidationRecord}
     * @memberof AssociatedDomain
     */
    validationRecord: DomainValidationRecord;
}

/**
    * @export
    * @enum {string}
    */
export enum AssociatedDomainCertificateStatusEnum {
    Expired = 'EXPIRED',
    Failed = 'FAILED',
    Inactive = 'INACTIVE',
    Issued = 'ISSUED',
    PendingValidation = 'PENDING_VALIDATION',
    Revoked = 'REVOKED',
    ValidationTimedOut = 'VALIDATION_TIMED_OUT'
}

/**
 * A build (CI or CD) that ocurred
 * @export
 * @interface Build
 */
export interface Build {
    /**
     * This is actually the id of the first build_event for this build.
     * @type {number}
     * @memberof Build
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Build
     */
    buildNumber: number;
    /**
     * 
     * @type {BuildType}
     * @memberof Build
     */
    type: BuildType;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    env?: string;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    status: BuildStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    initiatorEmail: string;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    initiatorName: string;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    initiatorAvatarUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    commitHash: string;
    /**
     * 
     * @type {string}
     * @memberof Build
     */
    commitUrl: string;
    /**
     * 
     * @type {number}
     * @memberof Build
     */
    startTimestampInMillis: number;
    /**
     * 
     * @type {number}
     * @memberof Build
     */
    endTimestampInMillis?: number;
    /**
     * 
     * @type {Array<BuildPhase>}
     * @memberof Build
     */
    phases: Array<BuildPhase>;
}

/**
    * @export
    * @enum {string}
    */
export enum BuildStatusEnum {
    NotProvisioned = 'NOT_PROVISIONED',
    Succeeded = 'SUCCEEDED',
    Failed = 'FAILED',
    InProgress = 'IN_PROGRESS',
    Unknown = 'UNKNOWN'
}

/**
 * A phase of a Build
 * @export
 * @interface BuildPhase
 */
export interface BuildPhase {
    /**
     * 
     * @type {number}
     * @memberof BuildPhase
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof BuildPhase
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof BuildPhase
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof BuildPhase
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof BuildPhase
     */
    startTimestampInMillis: number;
    /**
     * 
     * @type {number}
     * @memberof BuildPhase
     */
    endTimestampInMillis?: number;
}
/**
 * Enum of kinds of builds
 * @export
 * @enum {string}
 */
export enum BuildType {
    Ci = 'CI',
    Cd = 'CD'
}

/**
 * A reference to the run CD
 * @export
 * @interface CD
 */
export interface CD {
    /**
     * 
     * @type {number}
     * @memberof CD
     */
    id?: number;
}
/**
 * Request made to POST /deploy or /promote
 * @export
 * @interface CDReq
 */
export interface CDReq {
    /**
     * 
     * @type {string}
     * @memberof CDReq
     */
    commitHash: string;
}
/**
 * A reference to the run CI
 * @export
 * @interface CI
 */
export interface CI {
    /**
     * 
     * @type {number}
     * @memberof CI
     */
    id?: number;
}
/**
 * Request made to POST /ci
 * @export
 * @interface CIReq
 */
export interface CIReq {
    /**
     * 
     * @type {string}
     * @memberof CIReq
     */
    commitHash: string;
}
/**
 * Request made to POST /checkout/session
 * @export
 * @interface CreateCheckoutSessionReq
 */
export interface CreateCheckoutSessionReq {
    /**
     * 
     * @type {string}
     * @memberof CreateCheckoutSessionReq
     */
    organizationName: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateCheckoutSessionReq
     */
    priceIds: Array<string>;
}
/**
 * Request made to POST /organization
 * @export
 * @interface CreateOrgReq
 */
export interface CreateOrgReq {
    /**
     * 
     * @type {string}
     * @memberof CreateOrgReq
     */
    organizationName: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrgReq
     */
    ownerCognitoUserId: string;
}
/**
 * Request made to POST /project
 * @export
 * @interface CreateProjectReq
 */
export interface CreateProjectReq {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectReq
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectReq
     */
    type: CreateProjectReqTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectReq
     */
    version: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectReq
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProjectReq
     */
    passCheckRuleEnabled?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateProjectReqTypeEnum {
    Node = 'NODE'
}

/**
 * A record of a deployment that has ocurred to an environment
 * @export
 * @interface Deployment
 */
export interface Deployment {
    /**
     * 
     * @type {number}
     * @memberof Deployment
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Deployment
     */
    initiatorEmail: string;
    /**
     * 
     * @type {string}
     * @memberof Deployment
     */
    initiatorName: string;
    /**
     * 
     * @type {string}
     * @memberof Deployment
     */
    initiatorAvatarUrl: string;
    /**
     * 
     * @type {string}
     * @memberof Deployment
     */
    commitHash: string;
    /**
     * 
     * @type {string}
     * @memberof Deployment
     */
    commitUrl: string;
    /**
     * 
     * @type {string}
     * @memberof Deployment
     */
    env: string;
    /**
     * 
     * @type {number}
     * @memberof Deployment
     */
    timestampInMillis: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Deployment
     */
    serviceUrls: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Deployment
     */
    status?: DeploymentStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DeploymentStatusEnum {
    Running = 'RUNNING',
    Stopped = 'STOPPED'
}

/**
 * DNS record necessary to validate a domain belongs to the Organization
 * @export
 * @interface DomainValidationRecord
 */
export interface DomainValidationRecord {
    /**
     * 
     * @type {string}
     * @memberof DomainValidationRecord
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof DomainValidationRecord
     */
    recordType: DomainValidationRecordRecordTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DomainValidationRecord
     */
    value: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DomainValidationRecordRecordTypeEnum {
    Cname = 'CNAME'
}

/**
 * General API error
 * @export
 * @interface ErrorDesc
 */
export interface ErrorDesc {
    /**
     * 
     * @type {number}
     * @memberof ErrorDesc
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorDesc
     */
    message: string;
}
/**
 * Log event
 * @export
 * @interface LogEvent
 */
export interface LogEvent {
    /**
     * 
     * @type {number}
     * @memberof LogEvent
     */
    timestamp: number;
    /**
     * 
     * @type {string}
     * @memberof LogEvent
     */
    message: string;
}
/**
 * Logs
 * @export
 * @interface Logs
 */
export interface Logs {
    /**
     * 
     * @type {Array<LogEvent>}
     * @memberof Logs
     */
    events: Array<LogEvent>;
    /**
     * 
     * @type {string}
     * @memberof Logs
     */
    nextToken?: string;
}
/**
 * An Organization
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    subscriptionStatus: OrganizationSubscriptionStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Organization
     */
    githubAppInstalled: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum OrganizationSubscriptionStatusEnum {
    Unconfirmed = 'UNCONFIRMED',
    Active = 'ACTIVE',
    Suspended = 'SUSPENDED',
    PendingCancellation = 'PENDING_CANCELLATION',
    Cancelled = 'CANCELLED'
}

/**
 * An Xtages project
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    organization: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    ghRepoUrl: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    type: ProjectTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    version: string;
    /**
     * 
     * @type {boolean}
     * @memberof Project
     */
    passCheckRuleEnabled: boolean;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    percentageOfSuccessfulBuildsInTheLastMonth?: number;
    /**
     * 
     * @type {Array<Build>}
     * @memberof Project
     */
    builds: Array<Build>;
    /**
     * 
     * @type {Array<Deployment>}
     * @memberof Project
     */
    deployments: Array<Deployment>;
}

/**
    * @export
    * @enum {string}
    */
export enum ProjectTypeEnum {
    Node = 'NODE'
}

/**
 * Xtages project\'s settings
 * @export
 * @interface ProjectSettings
 */
export interface ProjectSettings {
    /**
     * 
     * @type {number}
     * @memberof ProjectSettings
     */
    projectId: number;
    /**
     * 
     * @type {AssociatedDomain}
     * @memberof ProjectSettings
     */
    associatedDomain?: AssociatedDomain;
}
/**
 * List of projects
 * @export
 * @interface Projects
 */
export interface Projects {
    /**
     * 
     * @type {Array<Project>}
     * @memberof Projects
     */
    projects?: Array<Project>;
}
/**
 * Query to retrieve projects
 * @export
 * @interface QueryProjectReq
 */
export interface QueryProjectReq {
    /**
     * 
     * @type {boolean}
     * @memberof QueryProjectReq
     */
    deployed: boolean;
}
/**
 * Enum of resources
 * @export
 * @enum {string}
 */
export enum ResourceType {
    Project = 'PROJECT',
    MonthlyBuildMinutes = 'MONTHLY_BUILD_MINUTES',
    MonthlyDataTransferGbs = 'MONTHLY_DATA_TRANSFER_GBS'
}

/**
 * Request to create or update a project\'s settings
 * @export
 * @interface UpdateProjectSettingsReq
 */
export interface UpdateProjectSettingsReq {
    /**
     * FQDN
     * @type {string}
     * @memberof UpdateProjectSettingsReq
     */
    associatedDomainName: string;
}
/**
 * The usage for a certain resource
 * @export
 * @interface UsageDetail
 */
export interface UsageDetail {
    /**
     * 
     * @type {ResourceType}
     * @memberof UsageDetail
     */
    resourceType: ResourceType;
    /**
     * 
     * @type {string}
     * @memberof UsageDetail
     */
    status: UsageDetailStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof UsageDetail
     */
    limit: number;
    /**
     * 
     * @type {number}
     * @memberof UsageDetail
     */
    usage: number;
    /**
     * 
     * @type {number}
     * @memberof UsageDetail
     */
    resetTimestampInMillis?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UsageDetailStatusEnum {
    UnderLimit = 'UNDER_LIMIT',
    OverLimit = 'OVER_LIMIT',
    Grandfathered = 'GRANDFATHERED',
    OrgNotSubscribedToPlan = 'ORG_NOT_SUBSCRIBED_TO_PLAN',
    OrgInBadStanding = 'ORG_IN_BAD_STANDING'
}

/**
 * An Xtages user
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    isOwner: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    status: UserStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UserStatusEnum {
    Active = 'ACTIVE',
    Invited = 'INVITED',
    Expired = 'EXPIRED'
}

/**
 * A request to invite an user
 * @export
 * @interface UserInviteReq
 */
export interface UserInviteReq {
    /**
     * 
     * @type {string}
     * @memberof UserInviteReq
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserInviteReq
     */
    username: string;
}

/**
 * CdApi - axios parameter creator
 * @export
 */
export const CdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deploy the project to staging
         * @param {string} projectName Name of the project to run the CD operation on
         * @param {CDReq} cDReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploy: async (projectName: string, cDReq: CDReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectName' is not null or undefined
            assertParamExists('deploy', 'projectName', projectName)
            // verify required parameter 'cDReq' is not null or undefined
            assertParamExists('deploy', 'cDReq', cDReq)
            const localVarPath = `/project/{projectName}/deploy`
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cDReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Promote the project from staging to production
         * @param {string} projectName Name of the project to run the CD operation on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promote: async (projectName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectName' is not null or undefined
            assertParamExists('promote', 'projectName', projectName)
            const localVarPath = `/project/{projectName}/promote`
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rollback the project from the currently deployed version, in production, to the previous one.
         * @param {string} projectName Name of the project to run the CD operation on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollback: async (projectName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectName' is not null or undefined
            assertParamExists('rollback', 'projectName', projectName)
            const localVarPath = `/project/{projectName}/rollback`
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CdApi - functional programming interface
 * @export
 */
export const CdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CdApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deploy the project to staging
         * @param {string} projectName Name of the project to run the CD operation on
         * @param {CDReq} cDReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deploy(projectName: string, cDReq: CDReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CD>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deploy(projectName, cDReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Promote the project from staging to production
         * @param {string} projectName Name of the project to run the CD operation on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promote(projectName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CD>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promote(projectName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rollback the project from the currently deployed version, in production, to the previous one.
         * @param {string} projectName Name of the project to run the CD operation on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rollback(projectName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CD>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rollback(projectName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CdApi - factory interface
 * @export
 */
export const CdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CdApiFp(configuration)
    return {
        /**
         * 
         * @summary Deploy the project to staging
         * @param {string} projectName Name of the project to run the CD operation on
         * @param {CDReq} cDReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploy(projectName: string, cDReq: CDReq, options?: any): AxiosPromise<CD> {
            return localVarFp.deploy(projectName, cDReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Promote the project from staging to production
         * @param {string} projectName Name of the project to run the CD operation on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promote(projectName: string, options?: any): AxiosPromise<CD> {
            return localVarFp.promote(projectName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rollback the project from the currently deployed version, in production, to the previous one.
         * @param {string} projectName Name of the project to run the CD operation on
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollback(projectName: string, options?: any): AxiosPromise<CD> {
            return localVarFp.rollback(projectName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CdApi - object-oriented interface
 * @export
 * @class CdApi
 * @extends {BaseAPI}
 */
export class CdApi extends BaseAPI {
    /**
     * 
     * @summary Deploy the project to staging
     * @param {string} projectName Name of the project to run the CD operation on
     * @param {CDReq} cDReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdApi
     */
    public deploy(projectName: string, cDReq: CDReq, options?: any) {
        return CdApiFp(this.configuration).deploy(projectName, cDReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Promote the project from staging to production
     * @param {string} projectName Name of the project to run the CD operation on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdApi
     */
    public promote(projectName: string, options?: any) {
        return CdApiFp(this.configuration).promote(projectName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rollback the project from the currently deployed version, in production, to the previous one.
     * @param {string} projectName Name of the project to run the CD operation on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CdApi
     */
    public rollback(projectName: string, options?: any) {
        return CdApiFp(this.configuration).rollback(projectName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CheckoutApi - axios parameter creator
 * @export
 */
export const CheckoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a Stripe Checkout session
         * @param {CreateCheckoutSessionReq} createCheckoutSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckoutSession: async (createCheckoutSessionReq: CreateCheckoutSessionReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCheckoutSessionReq' is not null or undefined
            assertParamExists('createCheckoutSession', 'createCheckoutSessionReq', createCheckoutSessionReq)
            const localVarPath = `/checkout/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCheckoutSessionReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a Stripe customer portal session URI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerPortalSession: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/checkout/portal/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckoutApi - functional programming interface
 * @export
 */
export const CheckoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckoutApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a Stripe Checkout session
         * @param {CreateCheckoutSessionReq} createCheckoutSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCheckoutSession(createCheckoutSessionReq: CreateCheckoutSessionReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCheckoutSession(createCheckoutSessionReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a Stripe customer portal session URI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerPortalSession(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerPortalSession(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CheckoutApi - factory interface
 * @export
 */
export const CheckoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckoutApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a Stripe Checkout session
         * @param {CreateCheckoutSessionReq} createCheckoutSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckoutSession(createCheckoutSessionReq: CreateCheckoutSessionReq, options?: any): AxiosPromise<string> {
            return localVarFp.createCheckoutSession(createCheckoutSessionReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a Stripe customer portal session URI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerPortalSession(options?: any): AxiosPromise<string> {
            return localVarFp.getCustomerPortalSession(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CheckoutApi - object-oriented interface
 * @export
 * @class CheckoutApi
 * @extends {BaseAPI}
 */
export class CheckoutApi extends BaseAPI {
    /**
     * 
     * @summary Creates a Stripe Checkout session
     * @param {CreateCheckoutSessionReq} createCheckoutSessionReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public createCheckoutSession(createCheckoutSessionReq: CreateCheckoutSessionReq, options?: any) {
        return CheckoutApiFp(this.configuration).createCheckoutSession(createCheckoutSessionReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a Stripe customer portal session URI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public getCustomerPortalSession(options?: any) {
        return CheckoutApiFp(this.configuration).getCustomerPortalSession(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CiApi - axios parameter creator
 * @export
 */
export const CiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Run continuous integration for the project specified
         * @param {string} projectName Name of the project to run the CI operation
         * @param {CIReq} cIReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ci: async (projectName: string, cIReq: CIReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectName' is not null or undefined
            assertParamExists('ci', 'projectName', projectName)
            // verify required parameter 'cIReq' is not null or undefined
            assertParamExists('ci', 'cIReq', cIReq)
            const localVarPath = `/project/{projectName}/ci`
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cIReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CiApi - functional programming interface
 * @export
 */
export const CiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Run continuous integration for the project specified
         * @param {string} projectName Name of the project to run the CI operation
         * @param {CIReq} cIReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ci(projectName: string, cIReq: CIReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CI>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ci(projectName, cIReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CiApi - factory interface
 * @export
 */
export const CiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CiApiFp(configuration)
    return {
        /**
         * 
         * @summary Run continuous integration for the project specified
         * @param {string} projectName Name of the project to run the CI operation
         * @param {CIReq} cIReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ci(projectName: string, cIReq: CIReq, options?: any): AxiosPromise<CI> {
            return localVarFp.ci(projectName, cIReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CiApi - object-oriented interface
 * @export
 * @class CiApi
 * @extends {BaseAPI}
 */
export class CiApi extends BaseAPI {
    /**
     * 
     * @summary Run continuous integration for the project specified
     * @param {string} projectName Name of the project to run the CI operation
     * @param {CIReq} cIReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CiApi
     */
    public ci(projectName: string, cIReq: CIReq, options?: any) {
        return CiApiFp(this.configuration).ci(projectName, cIReq, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LogsApi - axios parameter creator
 * @export
 */
export const LogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve logs for a given CI and certain project
         * @param {string} projectName Name of the project to get the logs from
         * @param {number} buildId The id of the build
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildLogs: async (projectName: string, buildId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectName' is not null or undefined
            assertParamExists('buildLogs', 'projectName', projectName)
            // verify required parameter 'buildId' is not null or undefined
            assertParamExists('buildLogs', 'buildId', buildId)
            const localVarPath = `/project/{projectName}/{buildId}/logs`
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"buildId"}}`, encodeURIComponent(String(buildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogsApi - functional programming interface
 * @export
 */
export const LogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve logs for a given CI and certain project
         * @param {string} projectName Name of the project to get the logs from
         * @param {number} buildId The id of the build
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildLogs(projectName: string, buildId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Logs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buildLogs(projectName, buildId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogsApi - factory interface
 * @export
 */
export const LogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve logs for a given CI and certain project
         * @param {string} projectName Name of the project to get the logs from
         * @param {number} buildId The id of the build
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildLogs(projectName: string, buildId: number, options?: any): AxiosPromise<Logs> {
            return localVarFp.buildLogs(projectName, buildId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogsApi - object-oriented interface
 * @export
 * @class LogsApi
 * @extends {BaseAPI}
 */
export class LogsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve logs for a given CI and certain project
     * @param {string} projectName Name of the project to get the logs from
     * @param {number} buildId The id of the build
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsApi
     */
    public buildLogs(projectName: string, buildId: number, options?: any) {
        return LogsApiFp(this.configuration).buildLogs(projectName, buildId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new Organization beloging to a user, if the user doesn\'t exist then it\'s created also
         * @param {CreateOrgReq} createOrgReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: async (createOrgReq: CreateOrgReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrgReq' is not null or undefined
            assertParamExists('createOrganization', 'createOrgReq', createOrgReq)
            const localVarPath = `/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrgReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns details about the organization associated with the currently logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the projects for the organization that have been deployed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsDeployed: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/organization/projects/deployments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new Organization beloging to a user, if the user doesn\'t exist then it\'s created also
         * @param {CreateOrgReq} createOrgReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(createOrgReq: CreateOrgReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(createOrgReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns details about the organization associated with the currently logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the projects for the organization that have been deployed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsDeployed(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Projects>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsDeployed(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new Organization beloging to a user, if the user doesn\'t exist then it\'s created also
         * @param {CreateOrgReq} createOrgReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization(createOrgReq: CreateOrgReq, options?: any): AxiosPromise<Organization> {
            return localVarFp.createOrganization(createOrgReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns details about the organization associated with the currently logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(options?: any): AxiosPromise<Organization> {
            return localVarFp.getOrganization(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the projects for the organization that have been deployed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsDeployed(options?: any): AxiosPromise<Projects> {
            return localVarFp.projectsDeployed(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export class OrganizationApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new Organization beloging to a user, if the user doesn\'t exist then it\'s created also
     * @param {CreateOrgReq} createOrgReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public createOrganization(createOrgReq: CreateOrgReq, options?: any) {
        return OrganizationApiFp(this.configuration).createOrganization(createOrgReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns details about the organization associated with the currently logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public getOrganization(options?: any) {
        return OrganizationApiFp(this.configuration).getOrganization(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the projects for the organization that have been deployed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    public projectsDeployed(options?: any) {
        return OrganizationApiFp(this.configuration).projectsDeployed(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new Xtages project
         * @param {CreateProjectReq} createProjectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (createProjectReq: CreateProjectReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectReq' is not null or undefined
            assertParamExists('createProject', 'createProjectReq', createProjectReq)
            const localVarPath = `/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve logs for an application that is running in our platform
         * @param {string} projectName Name of the project to get the logs from
         * @param {number} buildId The id of the build
         * @param {string} env 
         * @param {number} [startTimeInMillis] 
         * @param {number} [endTimeInMillis] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployLogs: async (projectName: string, buildId: number, env: string, startTimeInMillis?: number, endTimeInMillis?: number, token?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectName' is not null or undefined
            assertParamExists('getDeployLogs', 'projectName', projectName)
            // verify required parameter 'buildId' is not null or undefined
            assertParamExists('getDeployLogs', 'buildId', buildId)
            // verify required parameter 'env' is not null or undefined
            assertParamExists('getDeployLogs', 'env', env)
            const localVarPath = `/project/{projectName}/deploy/{buildId}/logs`
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)))
                .replace(`{${"buildId"}}`, encodeURIComponent(String(buildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (env !== undefined) {
                localVarQueryParameter['env'] = env;
            }

            if (startTimeInMillis !== undefined) {
                localVarQueryParameter['startTimeInMillis'] = startTimeInMillis;
            }

            if (endTimeInMillis !== undefined) {
                localVarQueryParameter['endTimeInMillis'] = endTimeInMillis;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the project details
         * @param {string} projectName Name of the project to fetch
         * @param {boolean} [includeBuilds] Whether to include data the Builds for the project
         * @param {boolean} [includeDeployments] Whether to include data the last Deployments for the project
         * @param {boolean} [includeSuccessfulBuildPercentage] Whether to include the percentage of successful Builds in the last month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: async (projectName: string, includeBuilds?: boolean, includeDeployments?: boolean, includeSuccessfulBuildPercentage?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectName' is not null or undefined
            assertParamExists('getProject', 'projectName', projectName)
            const localVarPath = `/project/{projectName}`
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (includeBuilds !== undefined) {
                localVarQueryParameter['includeBuilds'] = includeBuilds;
            }

            if (includeDeployments !== undefined) {
                localVarQueryParameter['includeDeployments'] = includeDeployments;
            }

            if (includeSuccessfulBuildPercentage !== undefined) {
                localVarQueryParameter['includeSuccessfulBuildPercentage'] = includeSuccessfulBuildPercentage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetches the project\'s settings
         * @param {string} projectName Name of the project to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSettings: async (projectName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectName' is not null or undefined
            assertParamExists('getProjectSettings', 'projectName', projectName)
            const localVarPath = `/project/{projectName}/settings`
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the list of projects for the user\'s organization
         * @param {boolean} [includeLastBuild] Whether to include data about the last Build executed for each Project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects: async (includeLastBuild?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (includeLastBuild !== undefined) {
                localVarQueryParameter['includeLastBuild'] = includeLastBuild;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the settings of a project
         * @param {string} projectName Name of the project to fetch
         * @param {UpdateProjectSettingsReq} updateProjectSettingsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectSettings: async (projectName: string, updateProjectSettingsReq: UpdateProjectSettingsReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectName' is not null or undefined
            assertParamExists('updateProjectSettings', 'projectName', projectName)
            // verify required parameter 'updateProjectSettingsReq' is not null or undefined
            assertParamExists('updateProjectSettings', 'updateProjectSettingsReq', updateProjectSettingsReq)
            const localVarPath = `/project/{projectName}/settings`
                .replace(`{${"projectName"}}`, encodeURIComponent(String(projectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectSettingsReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new Xtages project
         * @param {CreateProjectReq} createProjectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(createProjectReq: CreateProjectReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(createProjectReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve logs for an application that is running in our platform
         * @param {string} projectName Name of the project to get the logs from
         * @param {number} buildId The id of the build
         * @param {string} env 
         * @param {number} [startTimeInMillis] 
         * @param {number} [endTimeInMillis] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeployLogs(projectName: string, buildId: number, env: string, startTimeInMillis?: number, endTimeInMillis?: number, token?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Logs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeployLogs(projectName, buildId, env, startTimeInMillis, endTimeInMillis, token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the project details
         * @param {string} projectName Name of the project to fetch
         * @param {boolean} [includeBuilds] Whether to include data the Builds for the project
         * @param {boolean} [includeDeployments] Whether to include data the last Deployments for the project
         * @param {boolean} [includeSuccessfulBuildPercentage] Whether to include the percentage of successful Builds in the last month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(projectName: string, includeBuilds?: boolean, includeDeployments?: boolean, includeSuccessfulBuildPercentage?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(projectName, includeBuilds, includeDeployments, includeSuccessfulBuildPercentage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Fetches the project\'s settings
         * @param {string} projectName Name of the project to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectSettings(projectName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectSettings(projectName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the list of projects for the user\'s organization
         * @param {boolean} [includeLastBuild] Whether to include data about the last Build executed for each Project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjects(includeLastBuild?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Project>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjects(includeLastBuild, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates the settings of a project
         * @param {string} projectName Name of the project to fetch
         * @param {UpdateProjectSettingsReq} updateProjectSettingsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectSettings(projectName: string, updateProjectSettingsReq: UpdateProjectSettingsReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProjectSettings(projectName, updateProjectSettingsReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new Xtages project
         * @param {CreateProjectReq} createProjectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(createProjectReq: CreateProjectReq, options?: any): AxiosPromise<Project> {
            return localVarFp.createProject(createProjectReq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve logs for an application that is running in our platform
         * @param {string} projectName Name of the project to get the logs from
         * @param {number} buildId The id of the build
         * @param {string} env 
         * @param {number} [startTimeInMillis] 
         * @param {number} [endTimeInMillis] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeployLogs(projectName: string, buildId: number, env: string, startTimeInMillis?: number, endTimeInMillis?: number, token?: string, options?: any): AxiosPromise<Logs> {
            return localVarFp.getDeployLogs(projectName, buildId, env, startTimeInMillis, endTimeInMillis, token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the project details
         * @param {string} projectName Name of the project to fetch
         * @param {boolean} [includeBuilds] Whether to include data the Builds for the project
         * @param {boolean} [includeDeployments] Whether to include data the last Deployments for the project
         * @param {boolean} [includeSuccessfulBuildPercentage] Whether to include the percentage of successful Builds in the last month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(projectName: string, includeBuilds?: boolean, includeDeployments?: boolean, includeSuccessfulBuildPercentage?: boolean, options?: any): AxiosPromise<Project> {
            return localVarFp.getProject(projectName, includeBuilds, includeDeployments, includeSuccessfulBuildPercentage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetches the project\'s settings
         * @param {string} projectName Name of the project to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSettings(projectName: string, options?: any): AxiosPromise<ProjectSettings> {
            return localVarFp.getProjectSettings(projectName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the list of projects for the user\'s organization
         * @param {boolean} [includeLastBuild] Whether to include data about the last Build executed for each Project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(includeLastBuild?: boolean, options?: any): AxiosPromise<Array<Project>> {
            return localVarFp.getProjects(includeLastBuild, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates the settings of a project
         * @param {string} projectName Name of the project to fetch
         * @param {UpdateProjectSettingsReq} updateProjectSettingsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectSettings(projectName: string, updateProjectSettingsReq: UpdateProjectSettingsReq, options?: any): AxiosPromise<ProjectSettings> {
            return localVarFp.updateProjectSettings(projectName, updateProjectSettingsReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new Xtages project
     * @param {CreateProjectReq} createProjectReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public createProject(createProjectReq: CreateProjectReq, options?: any) {
        return ProjectApiFp(this.configuration).createProject(createProjectReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve logs for an application that is running in our platform
     * @param {string} projectName Name of the project to get the logs from
     * @param {number} buildId The id of the build
     * @param {string} env 
     * @param {number} [startTimeInMillis] 
     * @param {number} [endTimeInMillis] 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getDeployLogs(projectName: string, buildId: number, env: string, startTimeInMillis?: number, endTimeInMillis?: number, token?: string, options?: any) {
        return ProjectApiFp(this.configuration).getDeployLogs(projectName, buildId, env, startTimeInMillis, endTimeInMillis, token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the project details
     * @param {string} projectName Name of the project to fetch
     * @param {boolean} [includeBuilds] Whether to include data the Builds for the project
     * @param {boolean} [includeDeployments] Whether to include data the last Deployments for the project
     * @param {boolean} [includeSuccessfulBuildPercentage] Whether to include the percentage of successful Builds in the last month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProject(projectName: string, includeBuilds?: boolean, includeDeployments?: boolean, includeSuccessfulBuildPercentage?: boolean, options?: any) {
        return ProjectApiFp(this.configuration).getProject(projectName, includeBuilds, includeDeployments, includeSuccessfulBuildPercentage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetches the project\'s settings
     * @param {string} projectName Name of the project to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectSettings(projectName: string, options?: any) {
        return ProjectApiFp(this.configuration).getProjectSettings(projectName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the list of projects for the user\'s organization
     * @param {boolean} [includeLastBuild] Whether to include data about the last Build executed for each Project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjects(includeLastBuild?: boolean, options?: any) {
        return ProjectApiFp(this.configuration).getProjects(includeLastBuild, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates the settings of a project
     * @param {string} projectName Name of the project to fetch
     * @param {UpdateProjectSettingsReq} updateProjectSettingsReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public updateProjectSettings(projectName: string, updateProjectSettingsReq: UpdateProjectSettingsReq, options?: any) {
        return ProjectApiFp(this.configuration).updateProjectSettings(projectName, updateProjectSettingsReq, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsageApi - axios parameter creator
 * @export
 */
export const UsageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the usage for a certain resource type across all projects across all resource types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsageDetails: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the usage for a certain resource type across all projects
         * @param {ResourceType} resourceType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageDetail: async (resourceType: ResourceType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('getUsageDetail', 'resourceType', resourceType)
            const localVarPath = `/usage/{resourceType}`
                .replace(`{${"resourceType"}}`, encodeURIComponent(String(resourceType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsageApi - functional programming interface
 * @export
 */
export const UsageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets the usage for a certain resource type across all projects across all resource types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsageDetails(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsageDetail>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsageDetails(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the usage for a certain resource type across all projects
         * @param {ResourceType} resourceType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsageDetail(resourceType: ResourceType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsageDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsageDetail(resourceType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsageApi - factory interface
 * @export
 */
export const UsageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsageApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets the usage for a certain resource type across all projects across all resource types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsageDetails(options?: any): AxiosPromise<Array<UsageDetail>> {
            return localVarFp.getAllUsageDetails(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the usage for a certain resource type across all projects
         * @param {ResourceType} resourceType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageDetail(resourceType: ResourceType, options?: any): AxiosPromise<UsageDetail> {
            return localVarFp.getUsageDetail(resourceType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsageApi - object-oriented interface
 * @export
 * @class UsageApi
 * @extends {BaseAPI}
 */
export class UsageApi extends BaseAPI {
    /**
     * 
     * @summary Gets the usage for a certain resource type across all projects across all resource types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    public getAllUsageDetails(options?: any) {
        return UsageApiFp(this.configuration).getAllUsageDetails(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the usage for a certain resource type across all projects
     * @param {ResourceType} resourceType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    public getUsageDetail(resourceType: ResourceType, options?: any) {
        return UsageApiFp(this.configuration).getUsageDetail(resourceType, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the list of users for the organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds (invites) an user. If the user already exists and hasn\'t accepted, it will be re-invited.
         * @param {UserInviteReq} userInviteReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUser: async (userInviteReq: UserInviteReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userInviteReq' is not null or undefined
            assertParamExists('inviteUser', 'userInviteReq', userInviteReq)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userInviteReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets the list of users for the organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Adds (invites) an user. If the user already exists and hasn\'t accepted, it will be re-invited.
         * @param {UserInviteReq} userInviteReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteUser(userInviteReq: UserInviteReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteUser(userInviteReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets the list of users for the organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds (invites) an user. If the user already exists and hasn\'t accepted, it will be re-invited.
         * @param {UserInviteReq} userInviteReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUser(userInviteReq: UserInviteReq, options?: any): AxiosPromise<User> {
            return localVarFp.inviteUser(userInviteReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Gets the list of users for the organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsers(options?: any) {
        return UserApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds (invites) an user. If the user already exists and hasn\'t accepted, it will be re-invited.
     * @param {UserInviteReq} userInviteReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public inviteUser(userInviteReq: UserInviteReq, options?: any) {
        return UserApiFp(this.configuration).inviteUser(userInviteReq, options).then((request) => request(this.axios, this.basePath));
    }
}


