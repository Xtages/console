/*
 * This file is generated by jOOQ.
 */
package xtages.console.query.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl

import xtages.console.query.tables.StripeCheckoutSession


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StripeCheckoutSessionRecord() : UpdatableRecordImpl<StripeCheckoutSessionRecord>(StripeCheckoutSession.STRIPE_CHECKOUT_SESSION), Record2<String?, String?> {

    var organizationName: String?
        set(value) = set(0, value)
        get() = get(0) as String?

    var stripeCheckoutSessionId: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<String?, String?> = super.fieldsRow() as Row2<String?, String?>
    override fun valuesRow(): Row2<String?, String?> = super.valuesRow() as Row2<String?, String?>
    override fun field1(): Field<String?> = StripeCheckoutSession.STRIPE_CHECKOUT_SESSION.ORGANIZATION_NAME
    override fun field2(): Field<String?> = StripeCheckoutSession.STRIPE_CHECKOUT_SESSION.STRIPE_CHECKOUT_SESSION_ID
    override fun component1(): String? = organizationName
    override fun component2(): String? = stripeCheckoutSessionId
    override fun value1(): String? = organizationName
    override fun value2(): String? = stripeCheckoutSessionId

    override fun value1(value: String?): StripeCheckoutSessionRecord {
        this.organizationName = value
        return this
    }

    override fun value2(value: String?): StripeCheckoutSessionRecord {
        this.stripeCheckoutSessionId = value
        return this
    }

    override fun values(value1: String?, value2: String?): StripeCheckoutSessionRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised StripeCheckoutSessionRecord
     */
    constructor(organizationName: String? = null, stripeCheckoutSessionId: String? = null): this() {
        this.organizationName = organizationName
        this.stripeCheckoutSessionId = stripeCheckoutSessionId
    }
}
