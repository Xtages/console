/*
 * This file is generated by jOOQ.
 */
package xtages.console.query.tables


import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import xtages.console.query.Public
import xtages.console.query.keys.XTAGES_USER_COGNITO_USER_ID_KEY
import xtages.console.query.keys.XTAGES_USER_PKEY
import xtages.console.query.tables.records.XtagesUserRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class XtagesUser(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, XtagesUserRecord>?,
    aliased: Table<XtagesUserRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<XtagesUserRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.xtages_user</code>
         */
        val XTAGES_USER = XtagesUser()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<XtagesUserRecord> = XtagesUserRecord::class.java

    /**
     * The column <code>public.xtages_user.id</code>.
     */
    val ID: TableField<XtagesUserRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.xtages_user.cognito_user_id</code>.
     */
    val COGNITO_USER_ID: TableField<XtagesUserRecord, String?> = createField(DSL.name("cognito_user_id"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<XtagesUserRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<XtagesUserRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.xtages_user</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.xtages_user</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.xtages_user</code> table reference
     */
    constructor(): this(DSL.name("xtages_user"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, XtagesUserRecord>): this(Internal.createPathAlias(child, key), child, key, XTAGES_USER, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<XtagesUserRecord, Int?> = super.getIdentity() as Identity<XtagesUserRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<XtagesUserRecord> = XTAGES_USER_PKEY
    override fun getKeys(): List<UniqueKey<XtagesUserRecord>> = listOf(XTAGES_USER_PKEY, XTAGES_USER_COGNITO_USER_ID_KEY)
    override fun `as`(alias: String): XtagesUser = XtagesUser(DSL.name(alias), this)
    override fun `as`(alias: Name): XtagesUser = XtagesUser(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): XtagesUser = XtagesUser(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): XtagesUser = XtagesUser(name, null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Int?, String?> = super.fieldsRow() as Row2<Int?, String?>
}
