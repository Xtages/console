/*
 * This file is generated by jOOQ.
 */
package xtages.console.query.tables


import kotlin.collections.List

import org.jooq.Check
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import xtages.console.query.Public
import xtages.console.query.enums.GithubAppInstallationStatus
import xtages.console.query.enums.OrganizationSubscriptionStatus
import xtages.console.query.keys.ORGANIZATION_GITHUB_APP_INSTALLATION_ID_KEY
import xtages.console.query.keys.ORGANIZATION_PKEY
import xtages.console.query.keys.ORGANIZATION__ORGANIZATION_OWNER_ID_FKEY
import xtages.console.query.tables.records.OrganizationRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Organization(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, OrganizationRecord>?,
    aliased: Table<OrganizationRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<OrganizationRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.organization</code>
         */
        val ORGANIZATION = Organization()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OrganizationRecord> = OrganizationRecord::class.java

    /**
     * The column <code>public.organization.name</code>.
     */
    val NAME: TableField<OrganizationRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.organization.stripe_customer_id</code>.
     */
    val STRIPE_CUSTOMER_ID: TableField<OrganizationRecord, String?> = createField(DSL.name("stripe_customer_id"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.organization.subscription_status</code>.
     */
    val SUBSCRIPTION_STATUS: TableField<OrganizationRecord, OrganizationSubscriptionStatus?> = createField(DSL.name("subscription_status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(xtages.console.query.enums.OrganizationSubscriptionStatus::class.java), this, "")

    /**
     * The column <code>public.organization.owner_id</code>.
     */
    val OWNER_ID: TableField<OrganizationRecord, Int?> = createField(DSL.name("owner_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.organization.github_app_installation_id</code>.
     */
    val GITHUB_APP_INSTALLATION_ID: TableField<OrganizationRecord, Long?> = createField(DSL.name("github_app_installation_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.organization.github_app_installation_status</code>.
     */
    val GITHUB_APP_INSTALLATION_STATUS: TableField<OrganizationRecord, GithubAppInstallationStatus?> = createField(DSL.name("github_app_installation_status"), SQLDataType.VARCHAR.asEnumDataType(xtages.console.query.enums.GithubAppInstallationStatus::class.java), this, "")

    private constructor(alias: Name, aliased: Table<OrganizationRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<OrganizationRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.organization</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.organization</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.organization</code> table reference
     */
    constructor(): this(DSL.name("organization"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, OrganizationRecord>): this(Internal.createPathAlias(child, key), child, key, ORGANIZATION, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<OrganizationRecord> = ORGANIZATION_PKEY
    override fun getKeys(): List<UniqueKey<OrganizationRecord>> = listOf(ORGANIZATION_PKEY, ORGANIZATION_GITHUB_APP_INSTALLATION_ID_KEY)
    override fun getReferences(): List<ForeignKey<OrganizationRecord, *>> = listOf(ORGANIZATION__ORGANIZATION_OWNER_ID_FKEY)

    private lateinit var _xtagesUser: XtagesUser
    fun xtagesUser(): XtagesUser {
        if (!this::_xtagesUser.isInitialized)
            _xtagesUser = XtagesUser(this, ORGANIZATION__ORGANIZATION_OWNER_ID_FKEY)

        return _xtagesUser;
    }
    override fun getChecks(): List<Check<OrganizationRecord>> = listOf(
          Internal.createCheck(this, DSL.name("github_app_cols_consistent"), "(((ROW(github_app_installation_id, github_app_installation_status) IS NULL) OR (ROW(github_app_installation_id, github_app_installation_status) IS NOT NULL)))", true)
    )
    override fun `as`(alias: String): Organization = Organization(DSL.name(alias), this)
    override fun `as`(alias: Name): Organization = Organization(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Organization = Organization(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Organization = Organization(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<String?, String?, OrganizationSubscriptionStatus?, Int?, Long?, GithubAppInstallationStatus?> = super.fieldsRow() as Row6<String?, String?, OrganizationSubscriptionStatus?, Int?, Long?, GithubAppInstallationStatus?>
}
