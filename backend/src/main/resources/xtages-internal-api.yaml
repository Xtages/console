openapi: 3.0.0
info:
  version: 0.0.1
  title: Xtages Internal API
  description: |
    Xtages internal API. Some of these endpoints might be extracted to an external API in the future.
servers:
  - url: https://console.xtages.com/api/v1
security:
  - bearerAuth: []
paths:
  /project:
    get:
      summary: Returns the list of projects for the user's organization
      operationId: getProjects
      tags:
        - project
      parameters:
        - in: query
          name: includeLastBuild
          schema:
            type: boolean
            default: false
          description: Whether to include data about the last Build executed for each Project.
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
    post:
      summary: Creates a new Xtages project
      operationId: createProject
      tags:
        - project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectReq"
      responses:
        '201':
          description: Project was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /project/{projectName}:
    get:
      summary: Returns the project details
      operationId: getProject
      tags:
        - project
      parameters:
        - in: path
          name: projectName
          schema:
            type: string
            minLength: 1
          required: true
          description: Name of the project to fetch
        - in: query
          name: includeBuilds
          schema:
            type: boolean
            default: false
          description: Whether to include data the Builds for the project
        - in: query
          name: includeDeployments
          schema:
            type: boolean
            default: false
          description: Whether to include data the last Deployments for the project
        - in: query
          name: includeSuccessfulBuildPercentage
          schema:
            type: boolean
            default: false
          description: Whether to include the percentage of successful Builds in the last month
      responses:
        '200':
          description: Project and builds
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /project/{projectName}/settings:
    get:
      summary: Fetches the project's settings
      operationId: getProjectSettings
      tags:
        - project
      parameters:
        - in: path
          name: projectName
          schema:
            type: string
            minLength: 1
          required: true
          description: Name of the project to fetch
      responses:
        '200':
          description: Project's settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectSettings"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
    put:
      summary: Updates the settings of a project
      operationId: updateProjectSettings
      tags:
        - project
      parameters:
        - in: path
          name: projectName
          schema:
            type: string
            minLength: 1
          required: true
          description: Name of the project to fetch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectSettingsReq"
      responses:
        '200':
          description: Project's settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectSettings"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /project/{projectName}/ci:
    post:
      summary: Run continuous integration for the project specified
      operationId: ci
      tags:
        - ci
      parameters:
        - in: path
          name: projectName
          schema:
            type: string
            minLength: 1
          required: true
          description: Name of the project to run the CI operation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CIReq"
      responses:
        "200":
          description: Request to run a CI was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CI"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /project/{projectName}/{buildId}/logs:
    get:
      summary: Retrieve logs for a given CI and certain project
      operationId: buildLogs
      tags:
        - logs
      parameters:
        - in: path
          name: projectName
          schema:
            type: string
            minLength: 1
          required: true
          description: Name of the project to get the logs from
        - in: path
          name: buildId
          schema:
            type: integer
            format: int64
          required: true
          description: The id of the build
      responses:
        "200":
          description: Logs successfully returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logs"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /project/{projectName}/deploy/{buildId}/logs:
    get:
      summary: Retrieve logs for an application that is running in our platform
      operationId: getDeployLogs
      tags:
        - project
      parameters:
        - in: path
          name: projectName
          schema:
            type: string
            minLength: 1
          required: true
          description: Name of the project to get the logs from
        - in: path
          name: buildId
          schema:
            type: integer
            format: int64
          required: true
          description: The id of the build
        - in: query
          name: env
          required: true
          schema:
            type: string
            minLength: 1
            description: The environment where the application is/was deploy
        - in: query
          name: startTimeInMillis
          schema:
            type: integer
            format: int64
            description: Initial time to get the logs for the application
        - in: query
          name: endTimeInMillis
          schema:
            type: integer
            format: int64
            description: End time to get the logs for the application
        - in: query
          name: token
          schema:
            type: string
            minLength: 1
            description: Pagination token to iterate over the logs
      responses:
        "200":
          description: Logs successfully returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logs"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /project/{projectName}/deploy:
    post:
      summary: Deploy the project to staging
      operationId: deploy
      tags:
        - cd
      parameters:
        - in: path
          name: projectName
          schema:
            type: string
            minLength: 1
          required: true
          description: Name of the project to run the CD operation on
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CDReq"
      responses:
        "200":
          description: Request to deploy to staging was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CD"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /project/{projectName}/promote:
    post:
      summary: Promote the project from staging to production
      operationId: promote
      tags:
        - cd
      parameters:
        - in: path
          name: projectName
          schema:
            type: string
            minLength: 1
          required: true
          description: Name of the project to run the CD operation on
      responses:
        "200":
          description: Request to deploy to staging was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CD"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /project/{projectName}/rollback:
    post:
      summary: Rollback the project from the currently deployed version, in production, to the previous one.
      operationId: rollback
      tags:
        - cd
      parameters:
        - in: path
          name: projectName
          schema:
            type: string
            minLength: 1
          required: true
          description: Name of the project to run the CD operation on
      responses:
        "200":
          description: Request to deploy to staging was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CD"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /organization:
    get:
      summary: Returns details about the organization associated with the currently logged in user.
      operationId: getOrganization
      tags:
        - organization
      responses:
        '201':
          description: Organization was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"
        default:
          $ref: "#/components/responses/DefaultError"
  /organization/eligibility:
    put:
      summary: Returns whether it is possible to sign up an organization.
      operationId: getOrganizationEligibility
      tags:
        - organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrgEligibleReq"
      responses:
        '200':
          description: Organization is eligible
        '409':
          description: Organization is not eligible
        default:
          $ref: "#/components/responses/DefaultError"
  /organization/projects/deployments:
    get:
      summary: Returns the projects for the organization that have been deployed
      operationId: projectsDeployed
      tags:
        - organization
      responses:
        '200':
          description: Projects that have deployments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projects"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /checkout/session:
    post:
      summary: Creates a Stripe Checkout session
      operationId: createCheckoutSession
      tags:
        - checkout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCheckoutSessionReq"
      responses:
        '201':
          description: A new Stripe session was created
          content:
            application/json:
              schema:
                type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /checkout/portal/session:
    post:
      summary: Gets a Stripe customer portal session URI
      operationId: getCustomerPortalSession
      tags:
        - checkout
      responses:
        '200':
          description: A new customer portal session URI
          content:
            application/json:
              schema:
                type: string
                format: uri
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /checkout/outcome:
    post:
      summary: Record a checkout outcome
      operationId: recordCheckoutOutcome
      tags:
        - checkout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecordCheckoutReq"
      responses:
        '200':
          description: OK
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /checkout/free:
    post:
      summary: Checkout for Free Tier
      operationId: freeTierCheckout
      tags:
        - checkout
      responses:
        '200':
          description: OK
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /resources/provision/{resource}:
    post:
      summary: Provisions a resource
      operationId: provisionResource
      tags:
        - provision
      parameters:
        - name: resource
          in: path
          required: true
          schema:
            "$ref": "#/components/schemas/Resource"
      responses:
        '200':
          description: OK
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"

  /usage:
    get:
      summary: Gets the usage for a certain resource type across all projects across all resource types
      operationId: getAllUsageDetails
      tags:
        - usage
      responses:
        '200':
          description: The usage for the resource type
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UsageDetail"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /usage/{resourceType}:
    get:
      summary: Gets the usage for a certain resource type across all projects
      operationId: getUsageDetail
      tags:
        - usage
      parameters:
        - in: path
          name: resourceType
          schema:
            $ref: "#/components/schemas/ResourceType"
          required: true
      responses:
        '200':
          description: The usage for the resource type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsageDetail"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /user:
    get:
      summary: Gets the list of users for the organization
      operationId: getUsers
      tags:
        - user
      responses:
        '200':
          description: The list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
    put:
      summary: Adds (invites) an user. If the user already exists and hasn't accepted, it will be re-invited.
      operationId: inviteUser
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInviteReq"
      responses:
        '200':
          description: The invited user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /github/app/install/url:
    get:
      summary: Returns the GitHub App install URL with an associated state token
      operationId: getInstallUrl
      tags:
        - gitHubApp
      responses:
        '200':
          description: The GitHub App install URL
          content:
            application/json:
              schema:
                type: string
                minLength: 1
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /github/app/install:
    post:
      summary: Records the GitHub App installation and creates an Organization based on it
      operationId: recordInstall
      tags:
        - gitHubApp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GitHubAppInstallReq"
      responses:
        '200':
          description: The created Organization
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
  /github/oauth/install:
    post:
      summary: Records the GitHub OAuth installation
      operationId: recordOauthInstall
      tags:
        - gitHubApp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GitHubOauthInstallReq"
      responses:
        '200':
          description: The created Organization
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          $ref: "#/components/responses/DefaultError"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorDesc:
      description: General API error
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    OrgEligibleReq:
      description: Request to check if it's possible to sign up an organization.
      properties:
        name:
          type: string
          minLength: 1
      required:
        - name
    Organization:
      description: An Organization
      properties:
        name:
          type: string
          minLength: 1
        subscriptionStatus:
          type: string
          enum:
            - UNCONFIRMED
            - ACTIVE
            - SUSPENDED
            - PENDING_CANCELLATION
            - CANCELLED
        githubAppInstalled:
          type: boolean
        gitHubOrganizationType:
          type: string
          enum:
            - ORGANIZATION
            - INDIVIDUAL
      required:
        - name
        - subscriptionStatus
        - githubAppInstalled
        - gitHubOrganizationType
    QueryProjectReq:
      description: Query to retrieve projects
      properties:
        deployed:
          type: boolean
      required:
        - deployed
    Projects:
      description: List of projects
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    Project:
      description: An Xtages project
      properties:
        id:
          type: integer
        name:
          type: string
          minLength: 1
        organization:
          type: string
          minLength: 1
        ghRepoUrl:
          type: string
          minLength: 1
        type:
          type: string
          enum:
            - NODE
        version:
          type: string
          minLength: 1
        passCheckRuleEnabled:
          type: boolean
        percentageOfSuccessfulBuildsInTheLastMonth:
          type: number
          format: double
        builds:
          type: array
          items:
            $ref: "#/components/schemas/Build"
        deployments:
          type: array
          items:
            $ref: "#/components/schemas/Deployment"
      required:
        - id
        - name
        - organization
        - ghRepoUrl
        - type
        - version
        - passCheckRuleEnabled
        - builds
        - deployments
    ProjectSettings:
      description: Xtages project's settings
      properties:
        projectId:
          type: integer
          minLength: 1
        associatedDomain:
          $ref: "#/components/schemas/AssociatedDomain"
      required:
        - projectId
    AssociatedDomain:
      description: An external domain pointing to a prod deployment of a Project
      properties:
        name:
          type: string
          description: FQDN
        certificateStatus:
          type: string
          minLength: 1
          enum:
            - EXPIRED
            - FAILED
            - INACTIVE
            - ISSUED
            - PENDING_VALIDATION
            - REVOKED
            - VALIDATION_TIMED_OUT
        validationRecord:
          $ref: "#/components/schemas/DomainValidationRecord"
      required:
        - name
        - certificateStatus
        - validationRecord
    DomainValidationRecord:
      description: DNS record necessary to validate a domain belongs to the Organization
      properties:
        name:
          type: string
          minLength: 1
        recordType:
          type: string
          minLength: 1
          enum:
            - CNAME
        value:
          type: string
          minLength: 1
      required:
        - name
        - recordType
        - value
    UpdateProjectSettingsReq:
      description: Request to create or update a project's settings
      properties:
        associatedDomainName:
          type: string
          minLength: 3
          description: FQDN
      required:
        - associatedDomainName
    CreateProjectReq:
      description: Request made to POST /project
      required:
        - name
        - type
        - version
      properties:
        name:
          type: string
          minLength: 1
        type:
          type: string
          enum:
            - NODE
        version:
          type: string
          minLength: 1
        description:
          type: string
        passCheckRuleEnabled:
          type: boolean
          default: false
    CI:
      description: A reference to the run CI
      properties:
        id:
          type: integer
          format: int64
    CIReq:
      description: Request made to POST /ci
      required:
        - commitHash
      properties:
        commitHash:
          type: string
          minLength: 1
    Logs:
      description: Logs
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/LogEvent'
        nextToken:
          type: string
          minLength: 1
      required:
        - events
    CD:
      description: A reference to the run CD
      properties:
        id:
          type: integer
          format: int64
    CDReq:
      description: Request made to POST /deploy or /promote
      required:
        - commitHash
      properties:
        commitHash:
          type: string
          minLength: 1
    CreateCheckoutSessionReq:
      description: Request made to POST /checkout/session
      required:
        - priceIds
      properties:
        priceIds:
          type: array
          items:
            type: string
            minItems: 1
    RecordCheckoutReq:
      description: Request made to POST /checkout/outcome
      properties:
        checkoutSessionId:
          type: string
          minLength: 1
      required:
        - checkoutSessionId
    LogEvent:
      description: Log event
      properties:
        timestamp:
          type: integer
          format: int64
        message:
          type: string
          minLength: 1
      required:
        - timestamp
        - message
    BuildType:
      description: Enum of kinds of builds
      type: string
      minLength: 2
      enum:
        - CI
        - CD
    BuildActions:
      description: Actions available to a specificic Build
      type: string
      minLength: 1
      enum:
        - DEPLOY
        - PROMOTE
        - ROLLBACK
        - CI
    Build:
      description: A build (CI or CD) that ocurred
      properties:
        id:
          type: integer
          format: int64
          description: This is actually the id of the first build_event for this build.
        buildNumber:
          type: integer
          format: int64
        type:
          $ref: "#/components/schemas/BuildType"
        env:
          type: string
        status:
          type: string
          enum:
            - NOT_PROVISIONED
            - SUCCEEDED
            - FAILED
            - IN_PROGRESS
            - UNKNOWN
        initiatorEmail:
          type: string
          minLength: 1
        initiatorName:
          type: string
          minLength: 1
        initiatorAvatarUrl:
          type: string
        commitHash:
          type: string
          minLength: 1
        commitUrl:
          type: string
          minLength: 1
        startTimestampInMillis:
          type: integer
          format: int64
        endTimestampInMillis:
          type: integer
          format: int64
        actions:
          type: array
          items:
            $ref: "#/components/schemas/BuildActions"
        phases:
          type: array
          items:
            $ref: "#/components/schemas/BuildPhase"
      required:
        - id
        - buildNumber
        - type
        - env
        - status
        - initiatorEmail
        - initiatorName
        - commitHash
        - commitUrl
        - startTimestampInMillis
        - actions
        - phases
    BuildPhase:
      description: A phase of a Build
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          minLength: 1
        status:
          type: string
          minLength: 1
        message:
          type: string
        startTimestampInMillis:
          type: integer
          format: int64
        endTimestampInMillis:
          type: integer
          format: int64
      required:
        - id
        - name
        - status
        - startTimestampInMillis
    Deployment:
      description: A record of a deployment that has ocurred to an environment
      properties:
        id:
          type: integer
          format: int64
        initiatorEmail:
          type: string
          minLength: 1
        initiatorName:
          type: string
          minLength: 1
        initiatorAvatarUrl:
          type: string
        commitHash:
          type: string
          minLength: 1
        commitUrl:
          type: string
          minLength: 1
        env:
          type: string
          minLength: 1
        timestampInMillis:
          type: integer
          format: int64
        serviceUrls:
          type: array
          items:
            type: string
            minLength: 1
        status:
          type: string
          minLength: 1
          enum:
            - STARTING
            - RUNNING
            - STOPPING
            - STOPPED
            - FAILED
      required:
        - id
        - initiatorEmail
        - initiatorName
        - initiatorAvatarUrl
        - commitHash
        - commitUrl
        - env
        - timestampInMillis
        - serviceUrls
        - status
    ResourceType:
      description: Enum of resources
      type: string
      enum:
        - PROJECT
        - MONTHLY_BUILD_MINUTES
        - MONTHLY_DATA_TRANSFER_GBS
        - DB_STORAGE_GBS
    UsageDetail:
      description: The usage for a certain resource
      properties:
        resourceType:
          $ref: "#/components/schemas/ResourceType"
        status:
          type: string
          minLength: 1
          enum:
            - UNDER_LIMIT
            - OVER_LIMIT
            - GRANDFATHERED
            - ORG_NOT_SUBSCRIBED_TO_PLAN
            - ORG_IN_BAD_STANDING
        limit:
          type: integer
          format: int64
          default: -1
        usage:
          type: integer
          format: int64
          default: -1
        resetTimestampInMillis:
          type: integer
          format: int64
      required:
        - resourceType
        - status
        - limit
        - usage
        - grandfathered
    UserInviteReq:
      description: A request to invite an user
      properties:
        name:
          type: string
          minLength: 1
        username:
          type: string
          minLength: 1
      required:
        - id
        - name
        - username
        - isOwner
        - status
    User:
      description: An Xtages user
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          minLength: 1
        username:
          type: string
          minLength: 1
        isOwner:
          type: boolean
        status:
          type: string
          enum:
            - ACTIVE
            - INVITED
            - EXPIRED
      required:
        - id
        - name
        - username
        - isOwner
        - status
    GitHubAppInstallReq:
      description: Request sent when the GitHub App is installed
      properties:
        code:
          type: string
          minLength: 1
        installationId:
          type: integer
          format: int64
        setupAction:
          type: string
          minLength: 1
        state:
          type: string
          minLength: 1
      required:
        - code
        - installation_id
        - setup_action
        - state
    GitHubOauthInstallReq:
      description: Request sent when the GitHub OAuth App is installed
      properties:
        code:
          type: string
          minLength: 1
        state:
          type: string
          minLength: 1
      required:
        - code
        - state
    Resource:
      enum:
        - DB
      type: string
      minLength: 1
  responses:
    DefaultError:
      description: Default error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorDesc"
    UnauthorizedError:
      description: Authorization error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorDesc"
